{"version":3,"sources":["BonusTask/BonusTask.module.css","App.module.css","CodingTask/CodingTask.tsx","BonusTask/HOC.tsx","BonusTask/BonusTask.tsx","App.tsx","api/api.js","reportWebVitals.ts","index.tsx"],"names":["module","exports","CodingTask","props","rows","data","Paper","elevation","TableContainer","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","component","scope","name","stars","forks","id","BonusTask","WithCollapseMode","itemsToRenderIfCollapsed","slice","itemsToRenderIfNotCollapsed","hasOwnProperty","className","s","container","Button","variant","color","onClick","onClickHandler","isCollapsed","app","useState","setCollapseMode","App","setData","useEffect","axios","get","then","result","items","repos","stargazers_count","url","html_url","newRepos","r","v1","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,UAAY,+B,mBCA9BD,EAAOC,QAAU,CAAC,IAAM,mB,kOCsCTC,MA/Bf,SAAoBC,GAEhB,IAAMC,EAAOD,EAAME,KACnB,OACI,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAOC,aAAW,eAAlB,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAW,uCACX,eAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6B,yCAC7B,eAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,2BAA6B,8CAGrC,cAACC,EAAA,EAAD,UACKX,EAAKY,KAAI,SAACC,GAAD,OACN,eAACL,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWK,UAAU,KAAKC,MAAM,MAAhC,SACKF,EAAIG,OAET,eAACP,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6BG,EAAII,SACjC,eAACR,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6BG,EAAIK,WALtBL,EAAIM,iB,yBCPxC,IAbsCC,EAahCC,GAbgCD,ECO7C,SAAmBrB,GAEf,IAAMuB,EAA2BvB,EAAME,KAAKsB,MAAM,EAAG,GAAGX,KAAI,SAACC,GAAD,OACxD,eAACL,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWK,UAAU,KAAKC,MAAM,MAAhC,SACKF,EAAIG,OAET,eAACP,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6BG,EAAII,SACjC,eAACR,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6BG,EAAIK,WALtBL,EAAIM,OASjBK,EAA8BzB,EAAME,KAAKW,KAAI,SAACC,GAAD,OAC/C,eAACL,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWK,UAAU,KAAKC,MAAM,MAAhC,SACKF,EAAIG,OAET,eAACP,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6BG,EAAII,SACjC,eAACR,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6BG,EAAIK,WALtBL,EAAIM,OAUnB,GAAIpB,EAAM0B,eAAe,eACrB,OACI,sBAAKC,UAAWC,IAAEC,UAAlB,UACI,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAASjC,EAAMkC,eAA7D,SACKlC,EAAMmC,YAAc,WAAa,aAEtC,cAAChC,EAAA,EAAD,CAAOC,UAAW,EAAGuB,UAAWC,IAAEQ,IAAlC,SACI,cAAC/B,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAOC,aAAW,eAAlB,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAW,uCACX,eAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA4B,yCAC5B,eAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,2BAA6B,8CAGrC,cAACC,EAAA,EAAD,UAEQZ,EAAMmC,YAAcZ,EAA2BE,cAU3E,IAAMxB,EAAOD,EAAME,KACnB,OACI,cAACC,EAAA,EAAD,CAAOC,UAAW,EAAlB,SACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CAAOC,aAAW,eAAlB,UACI,cAACC,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,UAAW,uCACX,eAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6B,yCAC7B,eAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,2BAA6B,8CAGrC,cAACC,EAAA,EAAD,UACKX,EAAKY,KAAI,SAACC,GAAD,OACN,eAACL,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAWK,UAAU,KAAKC,MAAM,MAAhC,SACKF,EAAIG,OAET,eAACP,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6BG,EAAII,SACjC,eAACR,EAAA,EAAD,CAAWC,MAAM,QAAjB,0BAA6BG,EAAIK,WALtBL,EAAIM,iBDvEX,SAACpB,GAAW,IAAD,EACRqC,oBAAS,GADD,mBACxCF,EADwC,KAC3BG,EAD2B,KAK/C,OAAO,cAACjB,EAAD,2BAAerB,GAAf,IACYmC,YAAaA,EACbD,eALI,WACnBI,GAAiBH,SEiCdI,MAvBf,WAAgB,IAAD,EAEWF,mBAAmB,IAF9B,mBAENnC,EAFM,KAEAsC,EAFA,KAeb,OAVAC,qBAAU,WCpB8BC,IAAMC,IAFxB,sDAGnBC,MAAK,SAACC,GAAD,OAAYA,EAAO3C,KAAK4C,SAC7BF,MAAK,SAACG,GAAD,OAAWA,EAAMlC,KAAI,kBAAgD,CACvEM,MADuB,EAAEA,MAEzBF,KAFuB,EAASA,KAGhCC,MAHuB,EAAe8B,iBAItCC,IAJuB,EAAiCC,gBDoBvDN,MAAK,SAACG,GACL,IAAMI,EAAWJ,EAAMlC,KAAK,SAACuC,GAAD,mBAAC,eAAsBA,GAAvB,IAA0BhC,GAAIiC,oBAC1Db,EAAQW,SAOZ,sBAAKxB,UAAWC,IAAEQ,IAAlB,UACE,cAAC,EAAD,CAAYlC,KAAMA,IACjB,cAACoB,EAAD,CAAkBpB,KAAMA,QEtBlBoD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.370b24d2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BonusTask_container__9lw9h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3GVTi\"};","import React from 'react';\r\nimport {Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from '@material-ui/core';\r\nimport {DataType, ItemType} from '../App';\r\n\r\nexport type CodingTaskPropsType = {\r\n    data: DataType;\r\n}\r\n\r\nfunction CodingTask(props: CodingTaskPropsType) {\r\n\r\n    const rows = props.data;\r\n    return (\r\n        <Paper elevation={3}>\r\n            <TableContainer>\r\n                <Table aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell><b>Name</b></TableCell>\r\n                            <TableCell align=\"right\" >üåü <b>Stars</b></TableCell>\r\n                            <TableCell align=\"right\"> üç¥ <b>Forks</b></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {rows.map((row: ItemType) => (\r\n                            <TableRow key={row.id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {row.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"right\">üåü {row.stars}</TableCell>\r\n                                <TableCell align=\"right\">üç¥ {row.forks}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default CodingTask;\r\n","import React, {ComponentType, useState} from 'react';\r\nimport BonusTask from './BonusTask';\r\nimport {CodingTaskPropsType} from '../CodingTask/CodingTask';\r\n\r\nfunction HOC<T extends CodingTaskPropsType >(BonusTask: ComponentType<T>) {\r\n    const BonusTaskContainer: React.FC<T> = (props) => {\r\n        const [isCollapsed, setCollapseMode] = useState(true);\r\n        const onClickHandler = () => {\r\n            setCollapseMode(!isCollapsed);\r\n        }\r\n        return <BonusTask {...props as T}\r\n                           isCollapsed={isCollapsed}\r\n                           onClickHandler={onClickHandler}/>\r\n    }\r\n    return BonusTaskContainer;\r\n}\r\n\r\nexport const WithCollapseMode = HOC(BonusTask);\r\n","import React from 'react';\r\nimport {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from '@material-ui/core';\r\nimport s from './BonusTask.module.css';\r\nimport {DataType, ItemType} from '../App';\r\n\r\nexport type BonusTaskPropsType = {\r\n    data: DataType\r\n    isCollapsed?: boolean\r\n    onClickHandler?: () => void\r\n}\r\n\r\nfunction BonusTask(props: BonusTaskPropsType) {\r\n\r\n    const itemsToRenderIfCollapsed = props.data.slice(0, 3).map((row: ItemType) => (\r\n        <TableRow key={row.id}>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n            </TableCell>\r\n            <TableCell align=\"right\">üåü {row.stars}</TableCell>\r\n            <TableCell align=\"right\">üç¥ {row.forks}</TableCell>\r\n        </TableRow>\r\n    ));\r\n\r\n    const itemsToRenderIfNotCollapsed = props.data.map((row: ItemType) => (\r\n        <TableRow key={row.id}>\r\n            <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n            </TableCell>\r\n            <TableCell align=\"right\">üåü {row.stars}</TableCell>\r\n            <TableCell align=\"right\">üç¥ {row.forks}</TableCell>\r\n        </TableRow>\r\n    ))\r\n\r\n    {\r\n        if (props.hasOwnProperty('isCollapsed')) {\r\n            return (\r\n                <div className={s.container}>\r\n                    <Button variant='contained' color='secondary' onClick={props.onClickHandler}>\r\n                        {props.isCollapsed ? 'See More' : 'See Less'}\r\n                    </Button>\r\n                    <Paper elevation={3} className={s.app}>\r\n                        <TableContainer>\r\n                            <Table aria-label=\"simple table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell><b>Name</b></TableCell>\r\n                                        <TableCell align=\"right\">üåü <b>Stars</b></TableCell>\r\n                                        <TableCell align=\"right\"> üç¥ <b>Forks</b></TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {\r\n                                        props.isCollapsed ? itemsToRenderIfCollapsed : itemsToRenderIfNotCollapsed\r\n                                    }\r\n                                </TableBody>\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </Paper>\r\n                </div>\r\n\r\n            )\r\n        } else {\r\n            const rows = props.data;\r\n            return (\r\n                <Paper elevation={3}>\r\n                    <TableContainer>\r\n                        <Table aria-label=\"simple table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell><b>Name</b></TableCell>\r\n                                    <TableCell align=\"right\" >üåü <b>Stars</b></TableCell>\r\n                                    <TableCell align=\"right\"> üç¥ <b>Forks</b></TableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody>\r\n                                {rows.map((row: ItemType) => (\r\n                                    <TableRow key={row.id}>\r\n                                        <TableCell component=\"th\" scope=\"row\">\r\n                                            {row.name}\r\n                                        </TableCell>\r\n                                        <TableCell align=\"right\">üåü {row.stars}</TableCell>\r\n                                        <TableCell align=\"right\">üç¥ {row.forks}</TableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Paper>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default BonusTask;\r\n","import React, {useEffect, useState} from 'react';\nimport s from './App.module.css';\nimport {getReactRepositories} from './api/api';\nimport { v1 } from 'uuid';\nimport CodingTask from './CodingTask/CodingTask';\nimport {WithCollapseMode} from './BonusTask/HOC';\n\nexport type ItemType = {\n  id: string\n  name: string\n  stars: number\n  forks: number\n  url: string\n}\n\nexport type DataType = ItemType []\n\n\nfunction App() {\n\n  const [data, setData] = useState<DataType>([]);\n\n\n  useEffect(() => {\n    getReactRepositories()\n        .then((repos: DataType) => {\n          const newRepos = repos.map( (r: ItemType) =>  ({...r, id: v1()}))\n          setData(newRepos);\n        })\n  });\n\n\n\n  return (\n      <div className={s.app}>\n        <CodingTask data={data}/>\n         <WithCollapseMode data={data} />\n      </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\r\nconst SEARCH_ENDPOINT = 'https://api.github.com/search/repositories?q=react';\r\n\r\nexport const getReactRepositories = () => axios.get(SEARCH_ENDPOINT)\r\n    .then((result) => result.data.items)\r\n    .then((repos) => repos.map(({forks, name, stargazers_count, html_url}) => ({\r\n        forks,\r\n        name,\r\n        stars: stargazers_count,\r\n        url: html_url,\r\n    })))\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}